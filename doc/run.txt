*run* *run.nvim*  Lightweight Neovim plugin
              designed to streamline file operations in file explorers like Oil

==============================================================================
CONTENTS                                                          *run-contents*

    1. Introduction ............ |run-introduction|
    2. Requirements ............ |run-requirements|
    3. Setup ................... |run-setup|
    4. Commands ................ |run-commands|
    5. Functions ............... |run-functions|
    6. Configuration ........... |run-configuration|
    7. Path Placeholders ....... |run-placeholders|
    8. File Browser Integrations |run-browsers|

==============================================================================
1. INTRODUCTION                                               *run-introduction*

Run.nvim makes it easy to execute commands on files and directories directly
from a file explorer, by just visually selecting the list of files you want to
operate on. It allows you to run appropriate commands based on file types,
with proper path handling and output visualization.

==============================================================================
2. REQUIREMENTS                                               *run-requirements*

- Neovim >= 0.7.0
- Oil.nvim (recommended, but optional with custom browser integrations)

==============================================================================
3. SETUP                                                             *run-setup*

Example configuration with default values:
>lua
    require("run").setup({
        current_browser = "oil",
        ask_confirmation = false, -- ask confirmation before running the command
        open_cmd = nil, -- auto-detected based on OS (example xdg-open for
                        -- linux, open for macos)
        populate_qflist_sync = false, --populate quickfix list for sync commands
        populate_qflist_async = true, --populate quickfix list for async commands
        open_qflist_sync = false, --open qflist after finishing (for sync)
        open_qflist_async = false, --open qflist after finishing (for async)
        history = {
            enable = true,
            history_file = vim.fn.stdpath("cache") .. "/run.nvim.hist"
        },
        default_actions = {
            -- ... see detailed default actions below
        },
        action_function = function(file_list, curr_dir)
            if #file_list == 1 and file_list[1] == "Makefile" then
                return "make -B", false
            end
        end
    })
<

==============================================================================
4. COMMANDS                                                       *run-commands*

*:RunFile*         Run a command on the current file/folder(s) (synchronous)
                  The command blocks until execution completes and shows
                  output in a split window below.

*:RunFileAsync*    Run a command on the current file/folder(s) (asynchronous)
                  The command runs in the background and shows real-time
                  output in a split window. Allows you to continue working.

==============================================================================
5. FUNCTIONS                                                     *run-functions*

*run.setup()*
    Initialize the plugin with custom configuration.
    Example: >lua
        require("run").setup({
            ask_confirmation = true,
            populate_qflist_async = true
        })
<

*run.register()*                                                  *run.register()*
    Register functions for a custom file browser integration.
    Parameters:
        {browser_name}  Name of the browser (string)
        {func_name}     Either "get_current_files" or "get_current_dir" (string)
        {func}          The implementation function
    For more info see |run-browsers|


*run.set_current_browser()*                            *run.set_current_browser()*
    Set the current file browser to use with Run.nvim.
    Parameters:
        {browser_name}  Name of the browser to use (string)

    Example: >lua
        require("run").set_current_browser("nvim-tree")
<

==============================================================================
6. CONFIGURATION                                             *run-configuration*

*current_browser*             String (default: "oil")
    The file browser to use for getting files and directories.

*ask_confirmation*            Boolean (default: false)  
    Whether to ask for confirmation before running commands.

*open_cmd*                    String or nil (default: nil)
    Command to use for opening files with default application.
    If nil, will auto-detect based on OS.

*populate_qflist_sync*        Boolean (default: false)
    Whether to populate quickfix list for synchronous commands.

*populate_qflist_async*       Boolean (default: true)
    Whether to populate quickfix list for asynchronous commands.

*open_qflist_sync*            Boolean (default: false)
    Whether to open quickfix list after synchronous commands.

*open_qflist_async*           Boolean (default: false)
    Whether to open quickfix list after asynchronous commands.

*history.enable*              Boolean (default: true)
    Whether to enable command history.

*history.history_file*        String
    Path to file for storing command history.

*default_actions*             Table
    Mapping of file extensions or special conditions to commands.
    Example entries:
>lua
    [".py"] = {           -- Python files
        command = "python %d/%f",
        description = "Run python files (with default python interpreter)"
    },
    ["dir"] = {           -- Directories
        command = "tar czvf %d/%1.tar.gz -C %d %f",
        description = "tar.gz on the folder or multiple folders"
    },
    ["exe"] = {           -- Executable files
        command = "%d/%1",
        description = "Runs the file (only one) if it is executable"
    }
<
*action_function*             Function
    Custom function to map selected list of files to a command
    Example:
>lua
    action_function = function(file_list, curr_dir)
        if #file_list == 1 and file_list[1] == "Makefile" then
            return "make -B", false --false signifies the command is complete
                                 --and needs no filling (%f, %d etc.)
        end
    end
<

==============================================================================
7. PATH PLACEHOLDERS                                          *run-placeholders*

When defining commands, you can use these placeholders that will be replaced
with actual paths:

*%f*               All file/folder names under cursor, space-separated
*%d*               Current directory path
*%1*, *%2*, etc.    Individual file/folder names (numbered)
*%d/%f*            Full paths for all files (equivalent to directory + filename)
*%%*               Literal % character
*{open}*           System-specific open command (xdg-open, open, start)

If no placeholder is found in a command, the plugin automatically appends full
paths at the end.

Example of placeholder usage:
>lua
    -- For Python files, run with Python interpreter
    [".py"] = {
        command = "python %d/%f",  -- Run: python /path/to/file.py
        description = "Run python files"
    },

    -- For tar.gz files, extract to current directory
    [".tar.gz"] = {
        command = "tar xzvf %d/%f -C %d",  -- Extract the archive to current dir
        description = "Extracts archive file"
    },

    -- For C files, compile and run
    [".c"] = {
        command = "gcc %d/%f -o %d/a.out && %d/a.out",
        description = "Compiles and runs C file"
    }
<

==============================================================================
8. FILE BROWSER INTEGRATIONS                                      *run-browsers*

Run.nvim comes with built-in support for oil.nvim, but you can integrate with
other file browsers by implementing and registering two functions:

1. get_current_files - Returns a list of selected file names (not full paths)
2. get_current_dir - Returns the current directory path

Example for integrating with a custom file browser:
>lua
    -- Register nvim-tree functions
    require("run").register("nvim-tree", "get_current_files", function(range, bufnr)
      -- range is a table {line1: int, line2:int} representing range of selected text
      -- range[line1]=range[line2]=current line if user in normal mode
      -- bufnr is the buffer number of the file browser
      -- Return list of selected file names in nvim-tree
      -- Implementation depends on nvim-tree API
      return {"file1.txt", "file2.py"}
    end)

    require("run").register("nvim-tree", "get_current_dir", function(bufnr)
      -- bufnr is the buffer number of the file browser
      -- Return current directory path in nvim-tree
      return "/path/to/directory"
    end)

    -- Set nvim-tree as the current browser
    require("run").set_current_browser("nvim-tree")
<

==============================================================================
 vim:tw=80:ts=8:ft=help:norl:
